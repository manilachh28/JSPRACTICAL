"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configure = configure;
exports.addTestcafeTestingLibrary = addTestcafeTestingLibrary;
exports.within = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _testcafe = require("testcafe");

var _domTestingLibrary = require("dom-testing-library");

/* eslint-disable no-eval */

/* eslint-disable no-new-func */
const DOM_TESTING_LIBRARY_UMD_PATH = _path.default.join('./node_modules', 'dom-testing-library/dist/dom-testing-library.umd.js');

const DOM_TESTING_LIBRARY_UMD = _fs.default.readFileSync(DOM_TESTING_LIBRARY_UMD_PATH).toString();

async function configure(options, t) {
  const configFunction = `
  window.DomTestingLibrary.configure(${JSON.stringify(options)});
`;
  await new _testcafe.ClientFunction(new Function(configFunction))();

  if (t) {
    t.testRun.injectable.scripts.push('/testcafe-testing-library-config.js');
    t.testRun.session.proxy.GET('/testcafe-testing-library-config.js', {
      content: configFunction,
      contentType: 'application/x-javascript'
    });
  }
}

async function addTestcafeTestingLibrary(t) {
  // inject for 1st pageload.  Then just use injectables for subsequent page loads.
  // eslint-disable-next-line
  const inject = (0, _testcafe.ClientFunction)(() => {
    // eslint-disable-next-line no-undef
    window.eval(script);
  }, {
    dependencies: {
      script: DOM_TESTING_LIBRARY_UMD
    }
  });
  await inject.with({
    boundTestRun: t
  })(); //and for subsequent pageloads:

  t.testRun.injectable.scripts.push('/dom-testing-library.js');
  t.testRun.session.proxy.GET('/dom-testing-library.js', {
    content: DOM_TESTING_LIBRARY_UMD,
    contentType: 'application/x-javascript'
  });

  if (addTestcafeTestingLibrary.options) {
    await configure(addTestcafeTestingLibrary.options, t);
  }
} // eslint-disable-next-line no-shadow


addTestcafeTestingLibrary.configure = function (options) {
  addTestcafeTestingLibrary.options = (0, _extends2.default)({}, options);
  return addTestcafeTestingLibrary;
};

Object.keys(_domTestingLibrary.queries).forEach(queryName => {
  module.exports[queryName] = (0, _testcafe.Selector)(new Function(`
      return DomTestingLibrary.${queryName}(document.body, ...arguments);
      `));
});

const within = async sel => {
  const sanitizedSel = sel.replace(/"/g, "'");
  await (0, _testcafe.ClientFunction)(new Function(` 

      window.TestcafeTestingLibrary = window.TestcafeTestingLibrary || {}
      const elem = document.querySelector("${sanitizedSel}");
      window.TestcafeTestingLibrary["within_${sanitizedSel}"] = DomTestingLibrary.within(elem);

    `))();
  const container = {};
  Object.keys(_domTestingLibrary.queries).forEach(queryName => {
    container[queryName] = (0, _testcafe.Selector)(new Function(`return window.TestcafeTestingLibrary["within_${sanitizedSel}"].${queryName}(...arguments)`));
  });
  return container;
};

exports.within = within;